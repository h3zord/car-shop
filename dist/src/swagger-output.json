{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "Car Shop API",
        "description": "Esta documentação é destinada ao projeto Car Shop."
    },
    "host": "localhost:3000",
    "basePath": "/",
    "tags": [
        {
            "name": "Cars",
            "description": "Endpoints"
        },
        {
            "name": "Motorcycles",
            "description": "Endpoints"
        }
    ],
    "schemes": [
        "http"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/cars": {
            "post": {
                "tags": [
                    "Cars"
                ],
                "summary": "Criar um novo carro",
                "description": "Endpoint para cadastrar um novo carro no banco de dados.",
                "parameters": [
                    {
                        "name": "info",
                        "in": "body",
                        "description": "Informações necessárias para criar um novo carro.",
                        "schema": {
                            "$ref": "#/definitions/Car"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "schema": {
                            "$ref": "#/definitions/Car"
                        },
                        "description": "Requisição para criar um novo carro efetuada com sucesso!"
                    },
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/BodyNotFoundError"
                        },
                        "description": "Erro! A requisição falhou! O body com as informações necessárias não foi encontrado."
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/InvalidBodyError"
                        },
                        "description": "Erro! A requisição falhou! Verifique se as informações do body não estão ausentes ou incorretas."
                    }
                }
            },
            "get": {
                "tags": [
                    "Cars"
                ],
                "summary": "Listar todos os carros",
                "description": "Endpoint para listar todos os carros cadastrados no banco de dados.",
                "parameters": [],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/Car"
                        },
                        "description": "Requisição para listar todos os carros efetuada com sucesso!"
                    }
                }
            }
        },
        "/cars/{id}": {
            "get": {
                "tags": [
                    "Cars"
                ],
                "summary": "Buscar um carro pelo seu ID",
                "description": "Endpoint para buscar um carro cadastrado no banco de dados pelo seu ID.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "ID necessário para buscar o carro cadastrado no banco de dados."
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/Car"
                        },
                        "description": "Requisição para buscar um carro pelo seu ID efetuada com sucesso!"
                    },
                    "404": {
                        "schema": {
                            "$ref": "#/definitions/IdNotFoundError"
                        },
                        "description": "Erro! A requisição falhou! O carro não foi encontrado."
                    },
                    "422": {
                        "schema": {
                            "$ref": "#/definitions/InvalidIdError"
                        },
                        "description": "Erro! A requisição falhou! O ID é inválido."
                    }
                }
            },
            "put": {
                "tags": [
                    "Cars"
                ],
                "summary": "Atualizar um carro buscando pelo seu ID",
                "description": "Endpoint para buscar um carro cadastrado no banco de dados pelo seu ID, e depois atualizá-lo.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "ID necessário para buscar o carro cadastrado no banco de dados."
                    },
                    {
                        "name": "info",
                        "in": "body",
                        "description": "Informações necessárias para atualizar o carro.",
                        "schema": {
                            "$ref": "#/definitions/Car"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/Car"
                        },
                        "description": "Requisição para atualizar um carro efetuada com sucesso!"
                    },
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/BodyNotFoundError"
                        },
                        "description": "Erro! A requisição falhou! O body com as informações necessárias não foi encontrado."
                    },
                    "404": {
                        "schema": {
                            "$ref": "#/definitions/IdNotFoundError"
                        },
                        "description": "Erro! A requisição falhou! O carro não foi encontrado."
                    },
                    "422": {
                        "schema": {
                            "$ref": "#/definitions/InvalidIdError"
                        },
                        "description": "Erro! A requisição falhou! O ID é inválido."
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/InvalidBodyError"
                        },
                        "description": "Erro! A requisição falhou! Verifique se as informações do body não estão ausentes ou incorretas."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Cars"
                ],
                "summary": "Deletar um carro buscando pelo seu ID",
                "description": "Endpoint para deletar um carro cadastrado no banco de dados buscando pelo seu ID.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "ID necessário para buscar o carro cadastrado no banco de dados."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "A requisição para deletar um carro cadastrado no banco de dados foi efetuada com sucesso."
                    },
                    "404": {
                        "schema": {
                            "$ref": "#/definitions/IdNotFoundError"
                        },
                        "description": "Erro! A requisição falhou! O carro não foi encontrado."
                    },
                    "422": {
                        "schema": {
                            "$ref": "#/definitions/InvalidIdError"
                        },
                        "description": "Erro! A requisição falhou! O ID é inválido."
                    }
                }
            }
        },
        "/motorcycles": {
            "post": {
                "tags": [
                    "Motorcycles"
                ],
                "summary": "Criar uma nova moto",
                "description": "Endpoint para cadastrar um nova moto no banco de dados.",
                "parameters": [
                    {
                        "name": "info",
                        "in": "body",
                        "description": "Informações necessárias para criar uma nova moto.",
                        "schema": {
                            "$ref": "#/definitions/Motorcycle"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "schema": {
                            "$ref": "#/definitions/Motorcycle"
                        },
                        "description": "Requisição para criar uma nova moto efetuada com sucesso!"
                    },
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/BodyNotFoundError"
                        },
                        "description": "Erro! A requisição falhou! O body com as informações necessárias não foi encontrado."
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/InvalidBodyError"
                        },
                        "description": "Erro! A requisição falhou! Verifique se as informações do body não estão ausentes ou incorretas."
                    }
                }
            },
            "get": {
                "tags": [
                    "Motorcycles"
                ],
                "summary": "Listar todas as motos",
                "description": "Endpoint para listar todas as motos cadastradas no banco de dados.",
                "parameters": [],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/Motorcycle"
                        },
                        "description": "Requisição para listar todas as motos efetuada com sucesso!"
                    }
                }
            }
        },
        "/motorcycles/{id}": {
            "get": {
                "tags": [
                    "Motorcycles"
                ],
                "summary": "Buscar uma moto pelo seu ID",
                "description": "Endpoint para buscar uma moto cadastrada no banco de dados pelo seu ID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "ID necessário para buscar a moto cadastrada no banco de dados."
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/Motorcycle"
                        },
                        "description": "Requisição para buscar uma moto pelo seu ID efetuada com sucesso!"
                    },
                    "404": {
                        "schema": {
                            "$ref": "#/definitions/IdNotFoundError"
                        },
                        "description": "Erro! A requisição falhou! A moto não foi encontrada."
                    },
                    "422": {
                        "schema": {
                            "$ref": "#/definitions/InvalidIdError"
                        },
                        "description": "Erro! A requisição falhou! O ID é inválido."
                    }
                }
            },
            "put": {
                "tags": [
                    "Motorcycles"
                ],
                "summary": "Atualizar uma moto buscando pelo seu ID",
                "description": "Endpoint para buscar uma moto cadastrada no banco de dados pelo seu ID, e depois atualizá-la.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "ID necessário para buscar a moto cadastrada no banco de dados."
                    },
                    {
                        "name": "info",
                        "in": "body",
                        "description": "Informações necessárias para atualizar a moto.",
                        "schema": {
                            "$ref": "#/definitions/Motorcycle"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/Motorcycle"
                        },
                        "description": "Requisição para atualizar uma moto efetuada com sucesso!"
                    },
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/BodyNotFoundError"
                        },
                        "description": "Erro! A requisição falhou! O body com as informações necessárias não foi encontrado."
                    },
                    "404": {
                        "schema": {
                            "$ref": "#/definitions/IdNotFoundError"
                        },
                        "description": "Erro! A requisição falhou! a moto não foi encontrada."
                    },
                    "422": {
                        "schema": {
                            "$ref": "#/definitions/InvalidIdError"
                        },
                        "description": "Erro! A requisição falhou! O ID é inválido."
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/InvalidBodyError"
                        },
                        "description": "Erro! A requisição falhou! Verifique se as informações do body não estão ausentes ou incorretas."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Motorcycles"
                ],
                "summary": "Deletar uma moto buscando pelo seu ID",
                "description": "Endpoint para deletar uma moto cadastrada no banco de dados buscando pelo seu ID.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "ID necessário para buscar a moto cadastrada no banco de dados."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "A requisição para deletar uma moto cadastrada no banco de dados foi efetuada com sucesso."
                    },
                    "404": {
                        "schema": {
                            "$ref": "#/definitions/IdNotFoundError"
                        },
                        "description": "Erro! A requisição falhou! A moto não foi encontrada."
                    },
                    "422": {
                        "schema": {
                            "$ref": "#/definitions/InvalidIdError"
                        },
                        "description": "Erro! A requisição falhou! O ID é inválido."
                    }
                }
            }
        }
    },
    "definitions": {
        "Car": {
            "type": "object",
            "properties": {
                "model": {
                    "type": "string",
                    "example": "Reno Clio"
                },
                "year": {
                    "type": "number",
                    "example": 2008
                },
                "color": {
                    "type": "string",
                    "example": "White"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                },
                "buyValue": {
                    "type": "number",
                    "example": 10000
                },
                "doorsQty": {
                    "type": "number",
                    "example": 4
                },
                "seatsQty": {
                    "type": "number",
                    "example": 5
                }
            },
            "required": [
                "model",
                "year",
                "color",
                "buyValue",
                "doorsQty",
                "seatsQty"
            ]
        },
        "CarList": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "model": {
                        "type": "string",
                        "example": "Reno Clio"
                    },
                    "year": {
                        "type": "number",
                        "example": 2008
                    },
                    "color": {
                        "type": "string",
                        "example": "White"
                    },
                    "status": {
                        "type": "boolean",
                        "example": true
                    },
                    "buyValue": {
                        "type": "number",
                        "example": 10000
                    },
                    "doorsQty": {
                        "type": "number",
                        "example": 4
                    },
                    "seatsQty": {
                        "type": "number",
                        "example": 5
                    }
                },
                "required": [
                    "model",
                    "year",
                    "color",
                    "buyValue",
                    "doorsQty",
                    "seatsQty"
                ]
            }
        },
        "Motorcycle": {
            "type": "object",
            "properties": {
                "model": {
                    "type": "string",
                    "example": "Honda CG Titan 125"
                },
                "year": {
                    "type": "number",
                    "example": 2005
                },
                "color": {
                    "type": "string",
                    "example": "Black"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                },
                "buyValue": {
                    "type": "number",
                    "example": 6500
                },
                "category": {
                    "type": "string",
                    "enum": [
                        "Street",
                        "Custom",
                        "Trail"
                    ]
                },
                "engineCapacity": {
                    "type": "number",
                    "example": 125
                }
            },
            "required": [
                "model",
                "year",
                "color",
                "buyValue",
                "category",
                "engineCapacity"
            ]
        },
        "MotorcycleList": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "model": {
                        "type": "string",
                        "example": "Honda CG Titan 125"
                    },
                    "year": {
                        "type": "number",
                        "example": 2005
                    },
                    "color": {
                        "type": "string",
                        "example": "Black"
                    },
                    "status": {
                        "type": "boolean",
                        "example": true
                    },
                    "buyValue": {
                        "type": "number",
                        "example": 6500
                    },
                    "category": {
                        "type": "string",
                        "enum": [
                            "Street",
                            "Custom",
                            "Trail"
                        ]
                    },
                    "engineCapacity": {
                        "type": "number",
                        "example": 125
                    }
                },
                "required": [
                    "model",
                    "year",
                    "color",
                    "buyValue",
                    "category",
                    "engineCapacity"
                ]
            }
        },
        "InvalidBodyError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid body"
                }
            }
        },
        "BodyNotFoundError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Body not found"
                }
            }
        },
        "InvalidIdError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid mongo id"
                }
            }
        },
        "IdNotFoundError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Car not found"
                }
            }
        }
    }
}
